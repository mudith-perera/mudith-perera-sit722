name: CI - Test Python services & Push images to ACR

on:
  push:
    branches: [testing]

env:
  AZ_LOCATION: ${{ vars.AZ_LOCATION || 'australiaeast' }}
  PROD_RG: ${{ vars.PROD_RG || 'sit722-prod-rg' }}
  PROD_ACR: ${{ vars.PROD_ACR }} # e.g., mudithacr722
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- PYTHON TESTS (all 3 services) ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install & test product_service
        working-directory: backend/product_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pytest -q

      - name: Install & test order_service
        working-directory: backend/order_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pytest -q

      - name: Install & test customer_service
        working-directory: backend/customer_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pytest -q

      # ---------- AZURE LOGIN ----------
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Ensure RG & ACR exist (idempotent)
      - name: Ensure RG & ACR
        run: |
          az group create -n ${{ env.PROD_RG }} -l ${{ env.AZ_LOCATION }}
          if ! az acr show -n ${{ env.PROD_ACR }} >/dev/null 2>&1; then
            az acr create -n ${{ env.PROD_ACR }} -g ${{ env.PROD_RG }} --sku Basic -l ${{ env.AZ_LOCATION }}
          fi
          echo "LOGIN_SERVER=$(az acr show -n ${{ env.PROD_ACR }} --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: ACR login (docker)
        run: az acr login -n ${{ env.PROD_ACR }}

      # ---------- BUILD & PUSH ALL IMAGES ----------
      - name: Build & push product_service
        run: |
          docker build -t $LOGIN_SERVER/product-service:${{ env.IMAGE_TAG }} backend/product_service
          docker push $LOGIN_SERVER/product-service:${{ env.IMAGE_TAG }}

      - name: Build & push order_service
        run: |
          docker build -t $LOGIN_SERVER/order-service:${{ env.IMAGE_TAG }} backend/order_service
          docker push $LOGIN_SERVER/order-service:${{ env.IMAGE_TAG }}

      - name: Build & push customer_service
        run: |
          docker build -t $LOGIN_SERVER/customer-service:${{ env.IMAGE_TAG }} backend/customer_service
          docker push $LOGIN_SERVER/customer-service:${{ env.IMAGE_TAG }}

      - name: Build & push frontend
        run: |
          docker build -t $LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }} frontend
          docker push $LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}

      # Provide image list to staging
      - name: Write image refs
        run: |
          echo "$LOGIN_SERVER/product-service:${{ env.IMAGE_TAG }}"    >  images.txt
          echo "$LOGIN_SERVER/order-service:${{ env.IMAGE_TAG }}"     >> images.txt
          echo "$LOGIN_SERVER/customer-service:${{ env.IMAGE_TAG }}"  >> images.txt
          echo "$LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}"          >> images.txt

      - name: Upload artifact (image refs)
        uses: actions/upload-artifact@v4
        with:
          name: image-refs
          path: images.txt
