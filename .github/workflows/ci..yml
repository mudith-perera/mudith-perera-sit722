name: CI - Test Python services & Push images to ACR

on:
  push:
    branches: [testing]

env:
  AZ_LOCATION: ${{ vars.AZ_LOCATION || 'australiaeast' }}
  PROD_RG: ${{ vars.PROD_RG || 'sit722-prod-rg' }}
  PROD_ACR: ${{ vars.PROD_ACR }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    # ðŸ”¸ Start a PostgreSQL 15 service for tests
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products # product_service default DB
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # (Optional) client tools to create extra DBs if your other services need them
      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres & create test DBs if needed
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              break
            fi
            echo "Waiting for postgres... ($i)"; sleep 2
          done
          # create extra DBs only if your other services need them
          psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE orders;"  || true
          psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE customers;" || true

      # ðŸ”¸ Run tests for each service with DB envs
      - name: Test product_service
        working-directory: backend/product_service
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: products
          DB_USER: postgres
          DB_PASS: postgres
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pytest -q

      - name: Test order_service
        working-directory: backend/order_service
        # If order_service also uses Postgres, set its envs too; otherwise omit.
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: orders
          DB_USER: postgres
          DB_PASS: postgres
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pytest -q

      - name: Test customer_service
        working-directory: backend/customer_service
        # Same note as above.
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: customers
          DB_USER: postgres
          DB_PASS: postgres
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pytest -q

      # ðŸ”¸ Azure login + build & push images (unchanged from before)
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure RG & ACR
        run: |
          az group create -n ${{ env.PROD_RG }} -l ${{ env.AZ_LOCATION }}
          if ! az acr show -n ${{ env.PROD_ACR }} >/dev/null 2>&1; then
            az acr create -n ${{ env.PROD_ACR }} -g ${{ env.PROD_RG }} --sku Basic -l ${{ env.AZ_LOCATION }}
          fi
          echo "LOGIN_SERVER=$(az acr show -n ${{ env.PROD_ACR }} --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: ACR login
        run: az acr login -n ${{ env.PROD_ACR }}

      - name: Build & push product_service
        run: |
          docker build -t $LOGIN_SERVER/product-service:${{ env.IMAGE_TAG }} backend/product_service
          docker push $LOGIN_SERVER/product-service:${{ env.IMAGE_TAG }}

      - name: Build & push order_service
        run: |
          docker build -t $LOGIN_SERVER/order-service:${{ env.IMAGE_TAG }} backend/order_service
          docker push $LOGIN_SERVER/order-service:${{ env.IMAGE_TAG }}

      - name: Build & push customer_service
        run: |
          docker build -t $LOGIN_SERVER/customer-service:${{ env.IMAGE_TAG }} backend/customer_service
          docker push $LOGIN_SERVER/customer-service:${{ env.IMAGE_TAG }}

      - name: Build & push frontend
        run: |
          docker build -t $LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }} frontend
          docker push $LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}

      - name: Publish image refs
        run: |
          echo "$LOGIN_SERVER/product-service:${{ env.IMAGE_TAG }}"    >  images.txt
          echo "$LOGIN_SERVER/order-service:${{ env.IMAGE_TAG }}"     >> images.txt
          echo "$LOGIN_SERVER/customer-service:${{ env.IMAGE_TAG }}"  >> images.txt
          echo "$LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}"          >> images.txt
      - uses: actions/upload-artifact@v4
        with:
          name: image-refs
          path: images.txt
